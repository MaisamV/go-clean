// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-clean/internal/probes"
	http2 "github.com/go-clean/internal/probes/presentation/http"
	"github.com/go-clean/internal/swagger"
	http3 "github.com/go-clean/internal/swagger/presentation/http"
	"github.com/go-clean/platform"
	"github.com/go-clean/platform/config"
	"github.com/go-clean/platform/http"
	"github.com/go-clean/platform/logger"
)

// Injectors from wire.go:

// InitializeApplication creates and initializes the application with all dependencies
func InitializeApplication() (*Application, error) {
	logger := platform.ProvideLogger()
	config, err := platform.ProvideConfig(logger)
	if err != nil {
		return nil, err
	}
	server := platform.ProvideHTTPServer(config, logger)
	pingQueryHandler := probes.ProvidePingQueryHandler(logger)
	pingHandler := probes.ProvidePingHandler(logger, pingQueryHandler)
	pool, err := platform.ProvideDatabase(config, logger)
	if err != nil {
		return nil, err
	}
	databaseChecker := probes.ProvideDatabaseChecker(logger, pool)
	client, err := platform.ProvideRedis(config, logger)
	if err != nil {
		return nil, err
	}
	redisChecker := probes.ProvideRedisChecker(logger, client)
	getHealthQueryHandler := probes.ProvideHealthQueryHandler(logger, databaseChecker, redisChecker)
	healthService := probes.ProvideHealthService(logger, getHealthQueryHandler)
	healthHandler := probes.ProvideHealthHandler(logger, healthService)
	probesModule := ProvideProbesModule(pingHandler, healthHandler)
	swaggerConfig := swagger.ProvideSwaggerConfig()
	swaggerLoader, err := swagger.ProvideSwaggerLoader(logger, swaggerConfig)
	if err != nil {
		return nil, err
	}
	swaggerQueryHandler := swagger.ProvideSwaggerQueryHandler(logger, swaggerLoader)
	docsHandler := swagger.ProvideDocsHandler(logger, swaggerQueryHandler)
	swaggerModule := ProvideSwaggerModule(docsHandler)
	application := ProvideApplication(config, logger, server, probesModule, swaggerModule)
	return application, nil
}

// wire.go:

// Application holds all the application dependencies
type Application struct {
	Config     *config.Config
	Logger     logger.Logger
	HTTPServer *http.Server
	Probes     *ProbesModule
	Swagger    *SwaggerModule
}

// ProbesModule holds all probes-related dependencies
type ProbesModule struct {
	PingHandler   *http2.PingHandler
	HealthHandler *http2.HealthHandler
}

// SwaggerModule holds all swagger-related dependencies
type SwaggerModule struct {
	DocsHandler *http3.DocsHandler
}

// ProvideProbesModule provides the probes module
func ProvideProbesModule(
	pingHandler *http2.PingHandler,
	healthHandler *http2.HealthHandler,
) *ProbesModule {
	return &ProbesModule{
		PingHandler:   pingHandler,
		HealthHandler: healthHandler,
	}
}

// ProvideSwaggerModule provides the swagger module
func ProvideSwaggerModule(
	docsHandler *http3.DocsHandler,
) *SwaggerModule {
	return &SwaggerModule{
		DocsHandler: docsHandler,
	}
}

// ProvideApplication provides the main application structure
func ProvideApplication(config2 *config.Config, logger2 logger.Logger,

	httpServer *http.Server,
	probesModule *ProbesModule,
	swaggerModule *SwaggerModule,
) *Application {
	return &Application{
		Config:     config2,
		Logger:     logger2,
		HTTPServer: httpServer,
		Probes:     probesModule,
		Swagger:    swaggerModule,
	}
}
