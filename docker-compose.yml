version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: go-clean-postgres
    environment:
      POSTGRES_DB: go_clean_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - go-clean-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_clean_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: go-clean-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-clean-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: redis-server --appendonly yes

  # Database Migration Service (runs once and exits)
  migrate:
    image: migrate/migrate:v4.16.2
    container_name: go-clean-migrate
    volumes:
      - ./scripts/migrations:/migrations:ro
    networks:
      - go-clean-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:password@postgres:5432/go_clean_db?sslmode=disable",
      "up"
    ]
    restart: "no"

  # Application (uncomment when ready to run the app)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: go-clean-app
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DATABASE_URL=postgres://postgres:password@postgres:5432/go_clean_db?sslmode=disable
  #     - REDIS_URL=redis://redis:6379
  #     - APP_ENV=development
  #   networks:
  #     - go-clean-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     migrate:
  #       condition: service_completed_successfully
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  go-clean-network:
    driver: bridge